<?php


namespace Okotieno\AcademicYear\Tests\Unit;


use Okotieno\AcademicYear\Models\AcademicYear;
use Okotieno\AcademicYear\Models\Holiday;
use Okotieno\PermissionsAndRoles\Models\Permission;
use Tests\TestCase;

class AcademicYearArchivesTest extends TestCase
{
  public function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub
  }

  /**
   * POST /academic-years
   *
   * @test
   * @group post-request
   * @group academic-year-archives
   */

  public function authorised_user_can_close_academic_year()
  {
    Permission::factory()->state(['name' => 'close academic year'])->create();

    $academicYear = AcademicYear::factory()->create();
    $this->user->givePermissionTo('close academic year');
    $this->actingAs($this->user,'api')
      ->postJson('/api/academic-years/'.$academicYear.'/close');
     $this->assertNotEmpty(
       AcademicYear::where('name', $academicYear['name'])->first()->holidays->toArray());
  }

  public function authorised_user_can_archive_academic_year()
  {
    Permission::factory()->state(['name' => 'archive academic year'])->create();

    $academicYear = AcademicYear::factory()->create();
    $this->user->givePermissionTo('archive academic year');
    $this->actingAs($this->user,'api')
      ->postJson('/api/academic-years/'.$academicYear.'/archive');
    $this->assertNotEmpty(
      AcademicYear::where('name', $academicYear['name'])->first()->holidays->toArray());
  }
  public function authorised_user_can_unarchive_academic_year()
  {
    Permission::factory()->state(['name' => 'unarchive academic year'])->create();

    $academicYear = AcademicYear::factory()->create();
    $this->user->givePermissionTo('unarchive academic year');
    $this->actingAs($this->user,'api')
      ->postJson('/api/academic-years/'.$academicYear.'/archive');
    $this->assertNotEmpty(
      AcademicYear::where('name', $academicYear['name'])->first()->holidays->toArray());
  }

}
