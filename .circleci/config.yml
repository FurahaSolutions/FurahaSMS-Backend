# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  test:
    docker:
      # Specify the version you desire here
      - image: circleci/php:8.0

          # specify the version you desire here
      - image: circleci/openjdk:11.0.3-jdk-stretch
      #specify system properties
        environment:
          DB_ROOT_USER: root
          DB_URL: jdbc:mysql://localhost:3306/furahasms_testing
          DB_DRIVER: com.mysql.cj.jdbc.Driver
          DB_PASS: ""
      - image: circleci/mysql:8
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
          MYSQL_ROOT_PASSWORD: ''

    steps:
      - checkout
      - run:
          name: Install MySQL driver
          command: |
            sudo apt-get update && sudo apt-get dist-upgrade
            sudo apt-get install mysql-server
      # create database
      - run: mysql -h 127.0.0.1 -u root -e "create database furahasms_testing"
      - run:
          name: Install Node
          command: |
            curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
            sudo apt-get install -y nodejs

      # Download and cache dependencies

      # composer cache
      - restore_cache:
          keys:
            # "composer.json" can be used if "composer.json"
            # is not committed to the repository.
            - composer-v1-{{ checksum "composer.lock" }}
            # fallback to using the latest cache if no exact match is found
            - composer-v1-
      - run: composer install -n --prefer-dist
      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      # node cache
      - restore_cache:
          keys:
            - node-v4-{{ checksum "package.json" }}
            - node-v4-
      - run: npm install
      - save_cache:
          key: node-v4-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # prepare the database
      - run: touch storage/furahasms_testing.sqlite
      - run: php artisan migrate --env=testing --database=mysql --force

      # run tests with phpunit or codecept
      - run: ./vendor/bin/phpunit
      # this example uses codecept but you're not limited to it
#      - run: ./vendor/bin/codecept build
#      - run: ./vendor/bin/codecept run --xml result.xml
      - store_test_results:
          path: tests/_output
      - store_artifacts:
          path: tests/_output

workflows:
  version: 2
  workflow:
    jobs:
      - test
